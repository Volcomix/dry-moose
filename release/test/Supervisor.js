/// <reference path="../../typings/tsd.d.ts" />
var chai = require('chai');
var Q = require('q');
var moment = require('moment');
var DbManager = require('../database/DbManager');
var Supervisor = require('../Supervisor');
var GenericASCIIM1 = require('../collectors/GenericASCIIM1');
var DummyProcessor = require('../processors/DummyProcessor');
var SilentInvestor = require('../investors/SilentInvestor');
var DemoCelebrator = require('../celebrators/DemoCelebrator');
var DemoCapacitor = require('../capacitors/DemoCapacitor');
var BinaryOption = require('../documents/options/BinaryOption');
var should = chai.should();
describe('Supervisor', function () {
    before(function () {
        return DbManager.connect('test-Supervisor');
    });
    describe('#run()', function () {
        var quote = {
            dateTime: new Date('2015-06-01 12:00:00-0500'),
            open: 1.091230, high: 1.091310, low: 1.090950, close: 1.090960,
            volume: 0,
            rewards: [{
                    countdown: new Date('2015-06-01 12:20:00-0500'),
                    expiration: new Date('2015-06-01 12:30:00-0500'),
                    payout: 0.75,
                }]
        };
        it('should run', function () {
            return new Supervisor(new GenericASCIIM1('src/test/Supervisor.csv', [{
                    countdown: moment({ minutes: 10 }).toDate(),
                    expiration: moment({ minutes: 30 }).toDate(),
                    payout: 0.75
                }]), new DummyProcessor(), new SilentInvestor(), new DemoCelebrator(), new DemoCapacitor(100))
                .run();
        });
        it('should collect quotes', function () {
            // Supervisor close db so reconnect to continue tests
            return DbManager.connect('test-Supervisor')
                .then(function () {
                return Q.ninvoke(DbManager.db.collection('quotes'), 'count');
            })
                .then(function (count) {
                count.should.equal(1439);
                var cursor = DbManager.db.collection('quotes')
                    .find({ dateTime: new Date('2015-06-01 12:00:00-0500') });
                return Q.ninvoke(cursor, 'next');
            })
                .then(function (quote) {
                delete quote['_id']; // Generated by MongoDB
                quote.should.deep.equal(quote);
            });
        });
        it('should buy options', function () {
            return Q.ninvoke(DbManager.db.collection('options'), 'aggregate', [
                { $group: { "_id": "$direction", "count": { $sum: 1 } } }
            ])
                .then(function (result) {
                result.should.deep.equal([
                    { _id: BinaryOption.Direction.Call, count: 24 },
                    { _id: BinaryOption.Direction.Put, count: 22 }
                ]);
                var cursor = DbManager.db.collection('options')
                    .find({ 'quote.dateTime': new Date('2015-06-01 12:00:00-0500') });
                return Q.ninvoke(cursor, 'next');
            })
                .then(function (option) {
                // Remove properties Generated by MongoDB
                delete option['_id'];
                delete option.quote['_id'];
                option.should.deep.equal({
                    quote: quote,
                    expiration: new Date('2015-06-01 12:30:00-0500'),
                    amount: 10,
                    payout: 0.75,
                    direction: BinaryOption.Direction.Put
                });
            });
        });
        it('should get gains', function () {
            return Q.ninvoke(DbManager.db.collection('gains'), 'aggregate', [
                { $group: { "_id": "$value", "count": { $sum: 1 } } }
            ])
                .then(function (result) {
                result.should.deep.equal([
                    { _id: 17.5, count: 23 },
                    { _id: 0, count: 22 }
                ]);
                var cursor = DbManager.db.collection('gains')
                    .find({ 'dateTime': {
                        $in: [
                            new Date('2015-06-01 12:00:00-0500'),
                            new Date('2015-06-01 12:30:00-0500')
                        ]
                    } });
                return Q.ninvoke(cursor, 'toArray');
            })
                .then(function (gains) {
                gains.should.have.length(2);
                // Remove properties Generated by MongoDB
                delete gains[0]['_id'];
                delete gains[1]['_id'];
                gains.should.deep.equal([
                    { dateTime: new Date('2015-06-01 12:00:00-0500'), value: 17.5 },
                    { dateTime: new Date('2015-06-01 12:30:00-0500'), value: 0 }
                ]);
            });
        });
        it('should update portfolio');
    });
    after(function () {
        return Q.ninvoke(DbManager.db, 'dropDatabase')
            .then(function () {
            return DbManager.close();
        });
    });
});
